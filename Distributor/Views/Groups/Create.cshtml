@model Distributor.ViewModels.GroupViewCreateModel


<div class="row">
    <div class="col-md-12">
        <h1 class="page-header">Groups <small>Create</small></h1>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Groups", "Index", "Groups")
            </li>
            <li class="active">Create group</li>
        </ol>
    </div>
</div>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="row">
    <div class="col-md-8 col-md-offset-2">
        <div class="panel panel-green">
            <div class="panel-heading">New Group</div>
            <div class="panel-body">
                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger", @id = "nameerror" })
                    </div>
                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.VisibilityLevel, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EnumDropDownListFor(model => model.VisibilityLevel, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.VisibilityLevel, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.InviteLevel, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EnumDropDownListFor(model => model.InviteLevel, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.InviteLevel, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-12">
                    @Html.LabelFor(model => model.AcceptanceLevel, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EnumDropDownListFor(model => model.AcceptanceLevel, new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.AcceptanceLevel, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="panel-footer clearfix">
                <div class="col-md-4"><button type="submit" name="savebutton" class="btn btn-success btn-lg btn-block" onclick="ValidateFields()"><span class="glyphicon glyphicon-save"></span> Save</button></div>
                <div class="col-md-4"><button type="submit" value="Save & Add Members" name="addmembersbutton" class="btn btn-primary btn-lg btn-block" onclick="ValidateFields()"><span class="glyphicon glyphicon-user"></span> Save & Add Members</button></div>
                <div class="col-md-4"><button type="submit" name="resetbutton" class="btn btn-danger btn-lg btn-block"><span class="glyphicon glyphicon-repeat"></span> Reset</button></div>
            </div>
            
        </div>
    </div>
</div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script type="text/javascript">
        function ValidateFields() {
            var error = false;
            if ($("#Name").val() == "") {
                error = true;
                $("#nameerror").html("The name field is required");
            }
            if (error) {
                event.preventDefault();
            }
        }
    </script>
}