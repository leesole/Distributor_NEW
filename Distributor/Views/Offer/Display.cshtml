@using Distributor.Helpers
@model Distributor.ViewModels.OfferViewModel

@{
    //build breadcrumb from previous view
    List<string[]> breadcrumbs = new List<string[]>();

    foreach (KeyValuePair<int, string> pair in Model.BreadcrumbTrail)
    {
        if (pair.Value != null)
        {
            string[] breadcrumb = pair.Value.Split(',');
            breadcrumbs.Add(breadcrumb);
        }
    }

    //add breadcrumb to this view of the last view
    string[] breadcrumbLast = new string[] { Model.CallingActionDisplayName, Model.CallingAction, Model.CallingController };
    breadcrumbs.Add(breadcrumbLast);
}

<div class="row">
    <div class="col-md-12">
        <h1 class="page-header">Manage Listings <small>Offer - Details</small></h1>
        <ol class="breadcrumb">
            @for (var i = 0; i < breadcrumbs.Count; i++)
            {
                //remove filter to put into Action Link
                int index = breadcrumbs[i][1].IndexOf("type");

                if (index != -1)
                {
                    string action = @"" + breadcrumbs[i][1].Substring(index + 5) + "";
                    <li>
                        @Html.ActionLink(breadcrumbs[i][0], breadcrumbs[i][1].Substring(0, index - 1), breadcrumbs[i][2], new { type = action }, null)
                    </li>
                }
                else
                {
                    <li>
                        @Html.ActionLink(breadcrumbs[i][0], breadcrumbs[i][1], breadcrumbs[i][2])
                    </li>
                }
            }
            <li class="active">Details</li>
        </ol>
    </div>
</div>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "dislayOfferForm", onsubmit = "return Validate();" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-green">
                <div class="panel-heading">Offer details</div>
                <div class="panel-body">
                    <div class="row">
                        <div class="col-md-7">
                            <div class="form-horizontal">
                                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                                @Html.HiddenFor(model => model.DisplayOnly)
                                @Html.HiddenFor(model => model.Breadcrumb)
                                @Html.HiddenFor(model => model.BreadcrumbDictionary)
                                @Html.HiddenFor(model => model.CallingController)
                                @Html.HiddenFor(model => model.CallingAction)
                                @Html.HiddenFor(model => model.CallingActionDisplayName)
                                @Html.HiddenFor(model => model.BreadcrumbTrail)
                                @Html.HiddenFor(model => model.Type)
                                @Html.HiddenFor(model => model.EditableQuantity)
                                @Html.HiddenFor(model => model.OfferId)
                                @Html.HiddenFor(model => model.ListingId)
                                @Html.HiddenFor(model => model.RejectedBy)
                                @Html.HiddenFor(model => model.RejectedOn)
                                @Html.HiddenFor(model => model.YourOrganisationId)
                                @Html.HiddenFor(model => model.OfferOriginatorOrganisationId)
                                @Html.HiddenFor(model => model.CounterOfferOriginatorOrganisationId)
                                @Html.HiddenFor(model => model.ItemDescription)
                                @Html.HiddenFor(model => model.QuantityOutstanding)

                                <div id="editableQuantity" style="display:none">@Html.HiddenFor(model => model.EditableQuantity)</div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.OfferStatus, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7">@Model.OfferStatus.DisplayName()</div>
                                </div>

                                @if (Model.RejectedOn.HasValue)
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.RejectedBy, htmlAttributes: new { @class = "text-right col-md-6" })
                                        <div class="col-md-6">
                                            @Html.DisplayFor(model => model.RejectedBy, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>

                                    <div class="form-group">
                                        @Html.LabelFor(model => model.RejectedOn, htmlAttributes: new { @class = "text-right col-md-6" })
                                        <div class="col-md-6">
                                            @Html.DisplayFor(model => model.RejectedOn, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                }

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ListingType, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7">@Model.ListingType.DisplayName()</div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.ItemDescription, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7">@Html.DisplayFor(model => model.ItemDescription, new { htmlAttributes = new { @class = "form-control" } })</div>
                                </div>

                                <div class="form-group">
                                    @Html.LabelFor(model => model.QuantityOutstanding, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7" id="quantityOutstandingText">@Html.DisplayFor(model => model.QuantityOutstanding, new { htmlAttributes = new { @class = "form-control" } })</div>
                                </div>

                                @if (Model.DisplayOnly == false && Model.EditableQuantity == true && Model.CurrentOfferQuantity == 0 && Model.Type == "created")
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CurrentOfferQuantity, htmlAttributes: new { @class = "control-label col-md-5" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.CurrentOfferQuantity, new { htmlAttributes = new { @class = "form-control", onfocus = "javascipt:ClearErrors(this.id);" } })
                                            @Html.ValidationMessageFor(model => model.CurrentOfferQuantity, "", new { @class = "text-danger" })
                                            @Html.ValidationMessage("", new { @class = "text-danger", @id = "errorofferQty" })
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.CurrentOfferQuantity)
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CurrentOfferQuantity, htmlAttributes: new { @class = "text-right col-md-5" })
                                        @if (Model.Type == "received")
                                        {
                                            <div class="col-md-5" id="currentOfferQuantityText">@Html.DisplayFor(model => model.CurrentOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                            <div class="col-md-2" id=@Model.OfferId>
                                                <div class="col-sm-6" id=@Model.OfferId>
                                                    @if (Model.QuantityOutstanding >= Model.CurrentOfferQuantity && Model.EditableQuantity)
                                                    {
                                                        <button type="button" class="btn btn-xs btn-success acceptoffer" id=@Model.OfferId><span class="glyphicon glyphicon-ok"></span></button>
                                                    }
                                                </div>
                                                <div class="col-sm-6" id=@Model.OfferId>
                                                    <button type="button" class="btn btn-xs btn-danger rejectoffer" id=@Model.OfferId><span class="glyphicon glyphicon-remove"></span></button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-7" id="currentOfferQuantityText">@Html.DisplayFor(model => model.CurrentOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                        }
                                        
                                    </div>
                                }

                                @Html.HiddenFor(model => model.PreviousOfferQuantity)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PreviousOfferQuantity, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7">@Html.DisplayFor(model => model.PreviousOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                </div>

                                @if (Model.DisplayOnly == false && Model.EditableQuantity == true && Model.CurrentOfferQuantity > 0 && Model.Type == "received")
                                {
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CounterOfferQuantity, htmlAttributes: new { @class = "control-label col-md-5" })
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.CounterOfferQuantity, new { htmlAttributes = new { @class = "form-control", onfocus = "javascipt:ClearErrors(this.id);" } })
                                            @Html.ValidationMessageFor(model => model.CounterOfferQuantity, "", new { @class = "text-danger" })
                                            @Html.ValidationMessage("", new { @class = "text-danger", @id = "errorcounterOfferQty" })
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    @Html.HiddenFor(model => model.CounterOfferQuantity)
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CounterOfferQuantity, htmlAttributes: new { @class = "text-right col-md-5" })
                                        @if (Model.Type == "created")
                                        {
                                            <div class="col-md-5" id="counterOfferQuantityText">@Html.DisplayFor(model => model.CounterOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                            <div class="col-md-2" id=@Model.OfferId>
                                                <div class="col-sm-6" id=@Model.OfferId>
                                                    @if (Model.QuantityOutstanding >= Model.CurrentOfferQuantity && Model.EditableQuantity)
                                                    {
                                                        <button type="button" class="btn btn-xs btn-success acceptoffer" id=@Model.OfferId><span class="glyphicon glyphicon-ok"></span></button>
                                                    }
                                                </div>
                                                <div class="col-sm-6" id=@Model.OfferId>
                                                    <button type="button" class="btn btn-xs btn-danger rejectoffer" id=@Model.OfferId><span class="glyphicon glyphicon-remove"></span></button>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="col-md-7" id="counterOfferQuantityText">@Html.DisplayFor(model => model.CounterOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                        }
                                    </div>
                                }

                                @Html.HiddenFor(model => model.PreviousCounterOfferQuantity)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PreviousCounterOfferQuantity, htmlAttributes: new { @class = "text-right col-md-5" })
                                    <div class="col-md-7">@Html.DisplayFor(model => model.PreviousCounterOfferQuantity, new { htmlAttributes = new { @class = "form-control" } })</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div class="panel panel-default">
                                <div class="panel-heading">Listing owner details</div>
                                <div class="panel-body">
                                    <div class="form-horizontal">
                                        @Html.HiddenFor(model => model.ListingOriginatorAppUser)
                                        @Html.HiddenFor(model => model.ListingOriginatorOrganisation)
                                        @Html.HiddenFor(model => model.ListingOriginatorDateTime)
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ListingOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                            <div class="col-md-8">
                                                @Html.DisplayFor(model => model.ListingOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ListingOriginatorOrganisation, htmlAttributes: new { @class = "text-right col-md-4" })
                                            <div class="col-md-8">
                                                @Html.DisplayFor(model => model.ListingOriginatorOrganisation, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            @Html.LabelFor(model => model.ListingOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                            <div class="col-md-8">
                                                @Html.DisplayFor(model => model.ListingOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (Model.EditableQuantity)
                {
                    <div class="panel-footer clearfix">
                        <div class="col-sm-6"><button type="submit" name="saveofferbutton" class="btn btn-success btn-lg btn-block"><span class="glyphicon glyphicon-edit"></span> Submit Offer</button></div>
                        <div class="col-sm-6"><button type="button" name="resetbutton" class="btn btn-danger btn-lg btn-block" onclick="location.href='@Url.Action("Display", "Offer", new { id = Model.OfferId, breadcrumb = Model.Breadcrumb, callingActionDisplayName = Model.CallingActionDisplayName, displayOnly = Model.DisplayOnly, type = Model.Type, recalled = true, controllerValue = Model.CallingController, actionValue = Model.CallingAction })'"><span class="fa fa-undo"></span> Reset</button></div>
                    </div>
                }
            </div>

            <div class="row">
                <div class="col-md-4">
                    <div class="panel panel-default">
                        <div class="panel-heading">Offer owner details</div>
                        <div class="panel-body">
                            <div class="form-horizontal">
                                @Html.HiddenFor(model => model.OfferOriginatorAppUser)
                                @Html.HiddenFor(model => model.OfferOriginatorOrganisation)
                                @Html.HiddenFor(model => model.OfferOriginatorDateTime)
                                @Html.HiddenFor(model => model.LastOfferOriginatorAppUser)
                                @Html.HiddenFor(model => model.LastOfferOriginatorDateTime)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OfferOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.OfferOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OfferOriginatorOrganisation, htmlAttributes: new { @class = "text-right col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.OfferOriginatorOrganisation, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.OfferOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.OfferOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastOfferOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.LastOfferOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                                <div class="form-group">
                                    @Html.LabelFor(model => model.LastOfferOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                    <div class="col-md-8">
                                        @Html.DisplayFor(model => model.LastOfferOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                @if (Model.CounterOfferOriginatorOrganisation != null)
                {
                    <div class="col-md-4">
                        <div class="panel panel-default">
                            <div class="panel-heading">Counter offer owner details</div>
                            <div class="panel-body">
                                <div class="form-horizontal">
                                    @Html.HiddenFor(model => model.CounterOfferOriginatorAppUser)
                                    @Html.HiddenFor(model => model.CounterOfferOriginatorOrganisation)
                                    @Html.HiddenFor(model => model.CounterOfferOriginatorDateTime)
                                    @Html.HiddenFor(model => model.LastCounterOfferOriginatorAppUser)
                                    @Html.HiddenFor(model => model.LastCounterOfferOriginatorDateTime)
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CounterOfferOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.CounterOfferOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CounterOfferOriginatorOrganisation, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.CounterOfferOriginatorOrganisation, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.CounterOfferOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.CounterOfferOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LastCounterOfferOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.LastCounterOfferOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.LastCounterOfferOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.LastCounterOfferOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                @if (Model.OrderId.HasValue)
                {
                    <div class="col-md-4">
                        <div class="panel panel-default">
                            <div class="panel-heading">Order owner details</div>
                            <div class="panel-body">
                                <div class="form-horizontal">
                                    @Html.HiddenFor(model => model.OrderId)
                                    @Html.HiddenFor(model => model.OrderOriginatorAppUser)
                                    @Html.HiddenFor(model => model.OrderOriginatorOrganisation)
                                    @Html.HiddenFor(model => model.OrderOriginatorDateTime)
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.OrderOriginatorAppUser, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.OrderOriginatorAppUser, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.OrderOriginatorOrganisation, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.OrderOriginatorOrganisation, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.OrderOriginatorDateTime, htmlAttributes: new { @class = "text-right col-md-4" })
                                        <div class="col-md-8">
                                            @Html.DisplayFor(model => model.OrderOriginatorDateTime, new { htmlAttributes = new { @class = "form-control" } })
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">
        function ClearErrors(id) {
            $("#error" + id).text("");
        }

        function Validate() {
            //validate the offers are not greater than the value available
            var errors = false;

            try {
                var editableQty = $("#EditableQuantity").val();
                if (editableQty) {

                    var qtyOut = $("#quantityOutstandingText").text();

                    if ($("#CurrentOfferQuantity").is(":visible")) {
                        var qty = $("#CurrentOfferQuantity").val();

                        if (qty != undefined) {
                            if (parseFloat(qty) > parseFloat(qtyOut)) {
                                errors = true;
                                $("#errorofferQty").text("Value exceeds available");
                            }
                        }
                    }

                    if ($("#CounterOfferQuantity").is(":visible")) {
                        var qty = $("#CounterOfferQuantity").val();

                        if (qty != undefined) {
                            if (parseFloat(qty) > parseFloat(qtyOut)) {
                                errors = true;
                                $("#errorcounterOfferQty").text("Value exceeds available");
                            }
                        }
                    }
                }
            }
            catch (err) { } //maybe cannot find the fields as fields only named on those with input, so just step out with no error

            if (errors) {
                return false;
            }
            else if (!window.confirm("Save offers?")) {
                return false;  //don't submit'
            }
        }

        $(function () {
            //confirm the approve of tasks
            $('.acceptoffer').click(function (e) {
                trid = $(this).closest('div').attr('id');

                if (window.confirm("Are you sure?")) {
                    var url = "/Offer/AcceptOffer";

                    $.ajax({
                        url: url,
                        data: { offerId: trid },
                        cache: false,
                        type: "POST",
                        success: function (result) {
                            location.reload(true);
                        }
                    });
                }
            });
        });

        $(function () {
            //confirm the approve of tasks
            $('.rejectoffer').click(function (e) {
                trid = $(this).closest('div').attr('id');

                if (window.confirm("Are you sure?")) {
                    var url = "/Offer/RejectOffer";

                    $.ajax({
                        url: url,
                        data: { offerId: trid },
                        cache: false,
                        type: "POST",
                        success: function (result) {
                            location.reload(true);
                        }
                    });
                }
            });
        });
    </script>
}