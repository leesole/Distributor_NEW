@using Distributor.Helpers
@using Distributor.Enums
@model Distributor.ViewModels.RequiredListingGeneralViewListModel

@{
    //set up the breadcrumb trail so that this can be passed to the details screen for building it's own breadcrumb as the detail screen is called from multiple places
    string breadcrumb = "";
    string callingActionDisplayName = "Available";
}

<div class="row">
    <div class="col-md-12">
        <h1 class="page-header">General Information <small>Required</small></h1>
    </div>
</div>

@if (Model.Listing.Count > 0)
{
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <div class="col-md-4"><label>Search filters</label></div>
                <div class="col-md-7" style="font-size:small">
                    <div class="col-md-6">
                        <label class="col-md-12" style="font-weight:normal">
                            Distance: @Html.EditorFor(searchItem => Model.MaxDistance, new { htmlAttributes = new { @class = "input-sm", id = "MaxDistance" } }) miles
                        </label>
                    </div>
                    <div class="col-md-6">
                        <label class="col-md-12" style="font-weight:normal">
                            Age: @Html.EditorFor(searchItem => Model.MaxAge, new { htmlAttributes = new { @class = "input-sm", id = "MaxAge" } }) days
                        </label>
                    </div>
                </div>
                <div class="col-md-1"><button type="button" name="searchbutton" class="btn btn-default btn-xs btn-block" onclick="location.href='@Url.Action("Required", "GeneralInfo")?maxDistance=' + document.getElementById('MaxDistance').value + '&maxAge=' + document.getElementById('MaxAge').value"><span class="glyphicon glyphicon-search"></span></button></div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <div class="col-md-4"><label>Search filters</label></div>
                <div class="col-md-7" style="font-size:small">
                    <div class="col-md-6">
                        <label class="col-md-12" style="font-weight:normal">
                            Distance: @Html.Editor("MaxDistance", new { htmlAttributes = new { @class = "input-sm", id = "MaxDistance" } }) miles
                        </label>
                    </div>
                    <div class="col-md-6">
                        <label class="col-md-12" style="font-weight:normal">
                            Age: @Html.Editor("MaxAge", new { htmlAttributes = new { @class = "input-sm", id = "MaxAge" } }) days
                        </label>
                    </div>
                </div>
                <div class="col-md-1"><button type="button" name="searchbutton" class="btn btn-default btn-xs btn-block" onclick="location.href='@Url.Action("Required", "GeneralInfo")?maxDistance=' + document.getElementById('MaxDistance').value + '&maxAge=' + document.getElementById('MaxAge').value"><span class="glyphicon glyphicon-search"></span></button></div>
            </div>
        </div>
    </div>
}

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "requiredGeneralInfoForm", onsubmit = "return Validate();" }))
{
    @Html.AntiForgeryToken()

    @Html.HiddenFor(model => model.MaxDistance)
    @Html.HiddenFor(model => model.MaxAge)
    @Html.HiddenFor(model => model.EditableFields)

    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-green">
                <div class="panel-heading">Required listings</div>
                <div class="panel-body">
                    <table style="width:100%;" class="table table-striped table-bordered table-hover" id="requiredTable">
                        <thead>
                            <tr class="primary">
                                <th>Description</th>
                                <th>Type</th>
                                <th>Qty Required</th>
                                <th>UoM</th>
                                <th>Required To</th>
                                <th>Damaged</th>
                                <th>Expired</th>
                                <th>Collection</th>
                                <th>Requester</th>
                                <th>Distance</th>
                                <th>Requested</th>
                            </tr>
                        </thead>

                        <tbody>
                            @for (int i = 0; i < Model.Listing.Count(); i++)
                            {
                                var listingId = Model.Listing[i].ListingId;
                                var qtyOutstandingId = "qtyOutstanding" + i.ToString();

                                <tr>
                                    @Html.HiddenFor(modelItem => Model.Listing[i].ListingId)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].ItemDescription)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].QuantityOutstanding)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].UoM)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].AcceptDamagedItems)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].AcceptOutOfDateItems)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].CollectionAvailable)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].RequesterDetails)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].Distance)
                                    @Html.HiddenFor(modelItem => Model.Listing[i].ListingOriginatorOrganisationId)
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].ItemDescription)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].ItemType)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'"><span id=@qtyOutstandingId>@Html.DisplayFor(modelItem => Model.Listing[i].QuantityOutstanding)</span></td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].UoM)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].RequiredTo)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].AcceptDamagedItems)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].AcceptOutOfDateItems)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].CollectionAvailable)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].RequesterDetails)</td>
                                    <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].Distance)</td>
                                    @if (Model.Listing[i].OfferId.HasValue)
                                    {
                                        <td onclick="location.href='@Url.Action("DisplayRequired", "GeneralInfo", new { id = listingId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = true, recalled = true, defaultController = "GeneralInfo", defaultAction = "Required", maxDistance = Model.MaxDistance, maxAge = Model.MaxAge })'">@Html.DisplayFor(modelItem => Model.Listing[i].RequiredQty, new { htmlAttributes = new { @class = "form-control", style = "width:100px" } })</td>
                                    }
                                    else
                                    {
                                        var fieldId = "requiredQty" + i.ToString();
                                        var errorId = "requiredErrorQty" + i.ToString();
                                        <td>
                                            @Html.EditorFor(modelItem => Model.Listing[i].RequiredQty, new { htmlAttributes = new { @class = "form-control", style = "width:100px", id = fieldId, onfocus = "javascipt:ClearErrors(id);" } })
                                            @Html.ValidationMessageFor(modelItem => Model.Listing[i].RequiredQty, "", new { @class = "text-danger" })
                                            @Html.ValidationMessage("", new { @class = "text-danger", @id = errorId })
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                @if (Model.EditableFields)
                {
                    <div class="panel-footer clearfix">
                        <div class="col-sm-6"><button type="submit" name="savebutton" class="btn btn-success btn-lg btn-block"><span class="glyphicon glyphicon-edit"></span> Submit Offers</button></div>
                        <div class="col-sm-6"><button type="button" name="resetbutton" class="btn btn-danger btn-lg btn-block" onclick="location.href='@Url.Action("Available", "GeneralInfo")?maxDistance=' + document.getElementById('MaxDistance').value + '&maxAge=' + document.getElementById('MaxAge').value"><span class="fa fa-undo"></span> Reset</button></div>
                    </div>
                }
            </div>
        </div>
    </div>
}


@section Scripts {
    <script type="text/javascript">

        //Render tables
        $(document).ready(function () {
            $('#requiredTable').dataTable({
                responsive: true
            });
        });

        function ClearErrors(id) {
            var idNo = id.substring(8, id.length);
            $("#requiredErrorQty" + idNo).text("");
        }

        function Validate() {
            //validate the offers are not greater than the value available
            var errors = false;

            for (i = 0; i < @Model.Listing.Count; i++){
                try {
                    var qty = $("#requiredQty" + i).val();
                    var qtyOut = $("#qtyOutstanding" + i).text();

                    if (qty != undefined) {
                        if (parseFloat(qty) > parseFloat(qtyOut)) {
                            $("#requiredErrorQty" + i).text("Value exceeds requested");
                            errors = true;
                        }
                    }
                }
                catch(err) {} //maybe cannot find the fields as fields only named on those with input, so just step out with no error
            }

            if (errors) {
                return false;
            }
            else if (!window.confirm("Save offers?")) {
                return false;  //don't submit'
            }
        }
    </script>
}