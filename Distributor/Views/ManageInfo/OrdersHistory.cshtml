@using Distributor.Helpers
@model Distributor.ViewModels.OrderManageViewModel

@{
    //set up the breadcrumb trail so that this can be passed to the details screen for building it's own breadcrumb as the detail screen is called from multiple places
    string breadcrumb = "Orders,Orders,ManageInfo";
    string callingActionDisplayName = "History (" + ViewBag.Type + ")";
}

<div class="row">
    <div class="col-md-12">
        <h1 class="page-header">Manage Listings <small>@ViewBag.Type - History</small></h1>
        <ol class="breadcrumb">
            <li>
                @Html.ActionLink("Orders", "Orders", "ManageInfo")
            </li>
            <li class="active">History (@ViewBag.Type)</li>
        </ol>
    </div>
</div>

@if (Model.OrdersInViewModel != null)
{
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-green">
                <div class="panel-heading">Your historical orders in</div>
                <div class="panel-body">
                    <table style="width:100%;" class="table table-striped table-bordered table-hover" id="ordersInTable">
                        <thead>
                            <tr class="primary">
                                <th>Status</th>
                                <th>Qty</th>
                                <th>Created</th>
                                <th>Collected</th>
                                <th>Received</th>
                                <th>Closed</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.OrdersInViewModel.Count; i++)
                            {
                                var orderId = Model.OrdersInViewModel[i].OrderId;

                                <tr id=@orderId>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Model.OrdersInViewModel[i].OrderInStatus.DisplayName()</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersInViewModel[i].OrderQuanity)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersInViewModel[i].OrderCreationDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersInViewModel[i].OrderCollectedDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersInViewModel[i].OrderReceivedDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "in", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersInViewModel[i].OrderClosedDateTime)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <!-- /.table-responsive -->
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-green">
                <div class="panel-heading">Your current orders out</div>
                <div class="panel-body">
                    <table style="width:100%;" class="table table-striped table-bordered table-hover" id="ordersOutTable">
                        <thead>
                            <tr class="primary">
                                <th>Status</th>
                                <th>Qty</th>
                                <th>Created</th>
                                <th>Distributed</th>
                                <th>Delivered</th>
                                <th>Closed</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < Model.OrdersOutViewModel.Count; i++)
                            {
                                var orderId = Model.OrdersOutViewModel[i].OrderId;

                                <tr id=@orderId>
                                    @Html.HiddenFor(modelItem => Model.OrdersOutViewModel[i].OrderId)
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Model.OrdersOutViewModel[i].OrderOutStatus.DisplayName()</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersOutViewModel[i].OrderQuanity)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersOutViewModel[i].OrderCreationDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersOutViewModel[i].OrderDistributionDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersOutViewModel[i].OrderDeliveredDateTime)</td>
                                    <td onclick="location.href='@Url.Action("Display", "Order", new { id = orderId, breadcrumb = breadcrumb, callingActionDisplayName = callingActionDisplayName, displayOnly = false, type = "out", recalled = false, controllerValue = "ManageInfo", actionValue = "Orders" })'">@Html.DisplayFor(modelItem => Model.OrdersOutViewModel[i].OrderClosedDateTime)</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <!-- /.table-responsive -->
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script type="text/javascript">

        //Render tables
        $(document).ready(function () {
            $('#ordersInTable').dataTable({
                responsive: true
            });
        });

        $(document).ready(function () {
            $('#ordersOutTable').dataTable({
                responsive: true
            });
        });
    </script>
}